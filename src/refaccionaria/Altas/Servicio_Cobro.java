/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package refaccionaria.Altas;

import java.awt.Component;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import refaccionaria.Acciones.Conexion;
import refaccionaria.Acciones.Insert;
import refaccionaria.Acciones.Select;
import refaccionaria.Validaciones.ValidarC;

public class Servicio_Cobro extends javax.swing.JPanel {

    Insert in = new Insert();
    ValidarC v = new ValidarC();
    Conexion c = new Conexion();
    DefaultTableModel modelo = new DefaultTableModel();
    Select s;
    Connection conex;
    private Component rootPane;
    PreparedStatement ps;
    ResultSet rs;

    float monto_final = 0, precio;
    int cantidad, con = 1;

    /**
     * Creates new form Servicio_Cobro
     */
    public Servicio_Cobro() {
        initComponents();
        conex = c.ConectarBD();
        s = new Select();
        init();
        comboS();
        comboP();
    }
    
    public void init() {
        //table1.fixTable(jScrollPane1);
        Calendar calendar = new GregorianCalendar();
        Fecha_venta.setText("" + calendar.get(Calendar.DAY_OF_MONTH) + "-" + calendar.get(Calendar.MONTH) + "-" + calendar.get(Calendar.YEAR) + "");
    }
    public void comboS() {
        comboBoxServicio.removeAll();
        //comboTipo.addItem("Seleccione");
        String[] buscarCod = s.verServicios();
        for (String i : buscarCod) {
            comboBoxServicio.addItem(i);
        }
    }
    
    public void comboP() {
        comboBoxEmpleado.removeAll();
        //comboTipo.addItem("Seleccione");
        String[] buscarCod = s.verNombre();
        for (String i : buscarCod) {
            comboBoxEmpleado.addItem(i);
        }
    }
    public void limpiar_cliente() {
        txtNombre.setText("");
        txtAp_Pat.setText("");
        txtAp_Mat.setText("");
        txtID_Cliente.setText("");
    }
    
    public void limpiar_todo(){
        limpiar_cliente();
        LimpiarTable() ;
        comboBoxEmpleado.setSelectedIndex(0);
        comboBoxServicio.setSelectedIndex(0);
        txtMontoFinal.setText(""+0.0);
    }
    
    public void LimpiarTable() {
        for (int i = 0; i < modelo.getRowCount(); i++) {
            modelo.removeRow(i);
            i = i - 1;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboBoxEmpleado = new refaccionaria.swing.txtf.ComboBoxA();
        Fecha_venta = new refaccionaria.swing.txtf.TextFielda();
        bAnadirS = new javax.swing.JButton();
        comboBoxServicio = new refaccionaria.swing.txtf.ComboBoxA();
        txtID_Cliente = new refaccionaria.swing.txtf.TextFielda();
        bBuscarC = new javax.swing.JButton();
        txtNombre = new refaccionaria.swing.txtf.TextFielda();
        txtAp_Pat = new refaccionaria.swing.txtf.TextFielda();
        txtAp_Mat = new refaccionaria.swing.txtf.TextFielda();
        roundPanel1 = new refaccionaria.swing.RoundPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table1 = new refaccionaria.swing.table.Table();
        txtMontoFinal = new refaccionaria.swing.txtf.TextFielda();
        bquitarF = new javax.swing.JButton();
        bCancelar = new javax.swing.JButton();
        bGuardar = new javax.swing.JButton();

        setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Roboto", 0, 26)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Vender.png"))); // NOI18N
        jLabel1.setText("Cobrar Servicio");

        comboBoxEmpleado.setForeground(new java.awt.Color(255, 255, 255));
        comboBoxEmpleado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione el nombre del empleado" }));
        comboBoxEmpleado.setLabeText("");
        comboBoxEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxEmpleadoActionPerformed(evt);
            }
        });

        Fecha_venta.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Fecha_venta.setLabelText("Fecha");

        bAnadirS.setBackground(new java.awt.Color(32, 189, 255));
        bAnadirS.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        bAnadirS.setForeground(new java.awt.Color(25, 25, 25));
        bAnadirS.setText("AÃ±adir");
        bAnadirS.setBorder(null);
        bAnadirS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bAnadirS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAnadirSActionPerformed(evt);
            }
        });

        comboBoxServicio.setForeground(new java.awt.Color(255, 255, 255));
        comboBoxServicio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione el servicio" }));
        comboBoxServicio.setLabeText("");
        comboBoxServicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxServicioActionPerformed(evt);
            }
        });

        txtID_Cliente.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtID_Cliente.setLabelText("ID del cliente");

        bBuscarC.setBackground(new java.awt.Color(165, 254, 203));
        bBuscarC.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        bBuscarC.setForeground(new java.awt.Color(25, 25, 25));
        bBuscarC.setText("Buscar");
        bBuscarC.setBorder(null);
        bBuscarC.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bBuscarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarCActionPerformed(evt);
            }
        });

        txtNombre.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNombre.setLabelText("Nombre del cliente");

        txtAp_Pat.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtAp_Pat.setLabelText("Apellido Paterno del cliente");

        txtAp_Mat.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtAp_Mat.setLabelText("Apellido Materno del cliente");

        roundPanel1.setBackground(new java.awt.Color(255, 255, 255));
        roundPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        roundPanel1.setRound(10);

        table1.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Nombre del Servicio", "Precio", "Cantidad", "Monto total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table1);

        javax.swing.GroupLayout roundPanel1Layout = new javax.swing.GroupLayout(roundPanel1);
        roundPanel1.setLayout(roundPanel1Layout);
        roundPanel1Layout.setHorizontalGroup(
            roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 827, Short.MAX_VALUE)
                .addContainerGap())
        );
        roundPanel1Layout.setVerticalGroup(
            roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                .addContainerGap())
        );

        txtMontoFinal.setLabelText("Monto final");

        bquitarF.setBackground(new java.awt.Color(220, 213, 53));
        bquitarF.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        bquitarF.setForeground(new java.awt.Color(25, 25, 25));
        bquitarF.setText("Quitar Servicio");
        bquitarF.setBorder(null);
        bquitarF.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bquitarF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bquitarFActionPerformed(evt);
            }
        });

        bCancelar.setBackground(new java.awt.Color(235, 47, 47));
        bCancelar.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        bCancelar.setForeground(new java.awt.Color(25, 25, 25));
        bCancelar.setText("Cancelar");
        bCancelar.setBorder(null);
        bCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelarActionPerformed(evt);
            }
        });

        bGuardar.setBackground(new java.awt.Color(44, 203, 87));
        bGuardar.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        bGuardar.setForeground(new java.awt.Color(25, 25, 25));
        bGuardar.setText("Generar Venta");
        bGuardar.setBorder(null);
        bGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtAp_Pat, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtAp_Mat, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(bBuscarC, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtID_Cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)))
                        .addGap(185, 185, 185)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboBoxServicio, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bAnadirS, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(65, 65, 65)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(comboBoxEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Fecha_venta, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(bGuardar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(bCancelar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(bquitarF, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(694, 694, 694)
                        .addComponent(txtMontoFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(roundPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAp_Pat, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAp_Mat, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(bBuscarC, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtID_Cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboBoxEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Fecha_venta, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(comboBoxServicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(bAnadirS, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bquitarF, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(roundPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(txtMontoFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxEmpleadoActionPerformed
        // TODO add your handling code here:
        try {
            c = new Conexion();
            String nombre = comboBoxEmpleado.getSelectedItem().toString();
            if (!nombre.equals("")) {
                String datos[] = s.verNombre();
            }
        } catch (Exception x) {

        }
    }//GEN-LAST:event_comboBoxEmpleadoActionPerformed

    private void bAnadirSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAnadirSActionPerformed
        // TODO add your handling code here:
        String descripcion = comboBoxServicio.getSelectedItem().toString();
        if (!descripcion.equals("")) {
            if (v.Validar_ServicioV(descripcion) == 0) {//servicio encontrado
                 agregar_servicio();
            } else if (v.Validar_ServicioV(descripcion) == 1) {
                JOptionPane.showMessageDialog(rootPane, "El servicio no fue encontrado, ingrsar bien los datos o dar de alta el servicio!!");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Favor de ingresar la descripcion del articulo!!");
        }
    }//GEN-LAST:event_bAnadirSActionPerformed

    private void comboBoxServicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxServicioActionPerformed
        // TODO add your handling code here:
        try {
            c = new Conexion();
            String nombre = comboBoxServicio.getSelectedItem().toString();
            if (!nombre.equals("")) {
                String datos[] = s.verServicios();
            }
        } catch (Exception x) {

        }
    }//GEN-LAST:event_comboBoxServicioActionPerformed

    private void bBuscarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarCActionPerformed
        // TODO add your handling code here:
        if (!txtNombre.equals("") && !txtAp_Pat.equals("") && !txtAp_Mat.equals("")) {
            String nombre = txtNombre.getText();
            String ap_Pat = txtAp_Pat.getText();
            String ap_Mat = txtAp_Mat.getText();
            if (v.ValidarCliente(nombre, ap_Pat, ap_Mat) == 0) {
                String id_cliente = s.BuacarID_Cliente(nombre, ap_Pat, ap_Mat);
                txtID_Cliente.setText(id_cliente);
            } else if (v.ValidarCliente(nombre, ap_Pat, ap_Mat) == 1) {
                JOptionPane.showMessageDialog(rootPane, "El cliente no ha sido registrado, favor de guardar el cliente");
                limpiar_cliente();
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Favor de ingresar todos datos del cliente!!!!");
        }
    }//GEN-LAST:event_bBuscarCActionPerformed

    private void bquitarFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bquitarFActionPerformed
        // TODO add your handling code here:
        modelo = (DefaultTableModel) table1.getModel();
        if (table1.getSelectedRowCount() == 1) {
            float monto_final = Float.parseFloat(txtMontoFinal.getText());
            String monto_restar = table1.getValueAt(table1.getSelectedRow(), 4).toString();
            float monto = Float.parseFloat(monto_restar);
            float restado;
            restado = monto_final - monto;
            txtMontoFinal.setText("" + restado);
            modelo.removeRow(table1.getSelectedRow());
        } else if (table1.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(rootPane, "No hay nada en la tabla, favor de ingresar los datos");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Favor de seleccionar un dato");
        }
    }//GEN-LAST:event_bquitarFActionPerformed

    private void bCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelarActionPerformed
        // TODO add your handling code here:
        limpiar_todo();
    }//GEN-LAST:event_bCancelarActionPerformed

    private void bGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGuardarActionPerformed
        // TODO add your handling code here:
        if (!txtNombre.equals("") && !txtAp_Pat.equals("") && !txtAp_Mat.equals("") && !txtID_Cliente.equals("") && comboBoxEmpleado.getSelectedIndex() != 0 && !txtMontoFinal.getText().equals("")) {
             guardar_venta();
             guardar_detale();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Favor de ingresar todos datos del la venta!!!");
        }
        con = 1;
        limpiar_todo();
        monto_final = 0;
    }//GEN-LAST:event_bGuardarActionPerformed

    
     public void agregar_servicio() {
        float total;
        modelo = (DefaultTableModel) table1.getModel();
        String descripcion = comboBoxServicio.getSelectedItem().toString();;
        cantidad = 1;
        precio = Float.parseFloat(s.BuacarPrecio_Servi(descripcion));
        total = precio * cantidad;
        if (v.ValidarServicio(descripcion, precio) == 1) {
            JOptionPane.showMessageDialog(rootPane, "No fue encontrado el servicio");
        } else {
            ArrayList lista = new ArrayList();
            if (cantidad > 0) {
                lista.add(con);//ocntador de los articulos= al cns a asignar
                lista.add(descripcion);
                lista.add(precio);
                lista.add(cantidad);
                lista.add(total);
                Object[] ob = new Object[5];
                for (int i = 0; i < 5; i++) {
                    ob[i] = lista.get(i);
                }
                modelo.addRow(ob);
                table1.setModel(modelo);
                int ultima_fila = table1.getRowCount();
                calcular_costo();
                con = 1 + Integer.parseInt(table1.getValueAt(ultima_fila - 1, 0).toString());
            }

        }

    }

    public void calcular_costo() {
        monto_final = 0;
        for (int i = 0; i < table1.getRowCount(); i++) {
            cantidad = Integer.parseInt(table1.getValueAt(i, 3).toString());
            precio = Float.parseFloat(table1.getValueAt(i, 2).toString());
            monto_final = monto_final + (cantidad * precio);
        }
        txtMontoFinal.setText("" + monto_final);
    }
    
    public void guardar_venta() {
        int id_Cliente = Integer.parseInt(txtID_Cliente.getText());
        String nombre_Emp = comboBoxEmpleado.getSelectedItem().toString();
        int id_Emp = Integer.parseInt(s.BuacarID_Emp(nombre_Emp));
        String fecha_Venta = Fecha_venta.getText();
        float monto_Final = Float.parseFloat(txtMontoFinal.getText());
        if (!txtID_Cliente.getText().equals("") && comboBoxEmpleado.getSelectedIndex() != 0 && !txtMontoFinal.getText().equals("")) {
            if (monto_Final != 0) {
                if (in.insertVenta(id_Cliente, id_Emp, fecha_Venta, monto_Final)) {
                    JOptionPane.showMessageDialog(rootPane, "Venta Realizada!!!");
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Error al guardar la venta");
                }

            } else {
                JOptionPane.showMessageDialog(rootPane, "Ingrese el producto o material");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Todos  los campos, para realizar la venta");
        }
    }
    
    public void guardar_detale() {
        for (int i = 0; i < table1.getRowCount(); i++) {
            int id_Venta = Integer.parseInt(s.buscarId_Venta());
            int cns = Integer.parseInt(table1.getValueAt(i, 0).toString());
            String nombre_art = table1.getValueAt(i, 1).toString();
            String codi_Barra = s.BuscarCodigo_Barra(nombre_art);
            String descripcion = table1.getValueAt(i, 1).toString();
            float precio = Float.parseFloat(table1.getValueAt(i, 2).toString());
            int cantidad = Integer.parseInt(table1.getValueAt(i, 3).toString());
            float subtotal = Float.parseFloat(table1.getValueAt(i, 4).toString());
            PreparedStatement ps = null;
            ResultSet rs = null;
            int pRes;
              
                int id_Servi = Integer.parseInt(s.BuacarID_Servi(descripcion));
                try {
                    conex = c.ConectarBD();
                    String sql = "call AltadedetalleventaServicio (" + id_Venta + "," + id_Servi + "," + cns + "," + precio + "," + cantidad + "," + subtotal + ",null);";
                    ps = conex.prepareStatement(sql);
                    rs = ps.executeQuery();
                    rs.next();
                    pRes = rs.getInt("pRes");
                    //Condicion para cuando ya se ha guardado el registro
                    if (pRes == 1) {
                        System.out.println("Detalle guardado!!");
                    } else if (pRes == 2) {
                        JOptionPane.showMessageDialog(null, "Error al realizar la venta, no e encuentra el id de la compra");
                    } else if (pRes == 3) {
                        JOptionPane.showMessageDialog(null, "Error al realizar la venta", "No hay el articulo ingresado!", JOptionPane.ERROR_MESSAGE);
                    } /*else if (pRes == 0) {
                        JOptionPane.showMessageDialog(null, "Error al realizar la venta", "El # esta registrado", JOptionPane.ERROR_MESSAGE);
                    }*/
                } catch (Exception e) {
                }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private refaccionaria.swing.txtf.TextFielda Fecha_venta;
    private javax.swing.JButton bAnadirS;
    private javax.swing.JButton bBuscarC;
    private javax.swing.JButton bCancelar;
    private javax.swing.JButton bGuardar;
    private javax.swing.JButton bquitarF;
    private refaccionaria.swing.txtf.ComboBoxA comboBoxEmpleado;
    private refaccionaria.swing.txtf.ComboBoxA comboBoxServicio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private refaccionaria.swing.RoundPanel roundPanel1;
    private refaccionaria.swing.table.Table table1;
    private refaccionaria.swing.txtf.TextFielda txtAp_Mat;
    private refaccionaria.swing.txtf.TextFielda txtAp_Pat;
    private refaccionaria.swing.txtf.TextFielda txtID_Cliente;
    private refaccionaria.swing.txtf.TextFielda txtMontoFinal;
    private refaccionaria.swing.txtf.TextFielda txtNombre;
    // End of variables declaration//GEN-END:variables
}
